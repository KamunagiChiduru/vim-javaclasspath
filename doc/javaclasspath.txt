*vim-javaclasspath.txt*			 Give path information to other plugin

Version:     0.0.3
Author:      kamichidu <c.kamunagi@gmail.com>
Last Change: 05-Nov-2014.
License:     The MIT License (MIT)

Copyright (c) 2014 kamichidu

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

CONTENTS					      *javaclasspath-contents*

Abstract					      |javaclasspath-abstract|
Configuration					 |javaclasspath-configuration|
	How to Configure
	Priority
Interface					     |javaclasspath-interface|
	API
	Example
Parser Module					 |javaclasspath-parser-module|
	Abstract
	Specification
		API
		Behaviour
Built-in Parsers			       |javaclasspath-builtin-parsers|
Acknowledgement				       |javaclasspath-acknowledgement|

==============================================================================
ABSTRACT					      *javaclasspath-abstract*

*vim-javaclasspath* is a plugin to give classpath information. This is for
developping plugin which using jvm.
This aim to give a common way to cofigure some plugin which is using jvm
(java, scala, et al.).

==============================================================================
CONFIGURATION					 *javaclasspath-configuration*

This section describe configuration way.

How to Configure ~
						      *g:javaclasspath_config*
g:javaclasspath_config
	This is |Dictionary| type. Each key is a parser name.
	(See |javaclasspath-parser-module|)
	A parser enabled only if |g:javaclasspath_config| or
	|b:javaclasspath_config| has its name.

	|vim-javaclasspath| define to |g:javaclasspath_config| has a key which
	is a parser name, but each values are related its key is defined by
	each parser module.

						      *b:javaclasspath_config*
b:javaclasspath_config
	Similar to |g:javaclasspath_config| except evaluation priority.
	|b:javaclasspath_config| has higher priority than
	|g:javaclasspath_config| if exists.

Priority ~

Let know evaluation priority.

	|b:javaclasspath_config| > |g:javaclasspath_config|

					 *g:javaclasspath_enable_auto_analyze*
g:javaclasspath_enable_auto_analyze
	This is |Number| type (1/0). If value is 1, enable to auto-analyze
	when |'filetype'| is "java".

==============================================================================
INTERFACE					     *javaclasspath-interface*

This section describe interfaces |vim-javaclasspath| has.

API ~
							 *javaclasspath#get()*
javaclasspath#get()
	Returns a |Dictionary| which has some |Dictionary-function|s below.

	parse()
		Returns a |List| has |Dictionary| elements. It parses using
		|javaclasspath-parser-module|. Each |Dictionary| has:

		- kind
			One of these |String|

			- lib (a classpath)
			- src (a source path)

		- path
			Filename or directory path

		- javadoc (Optional)
			URL or file/directory path

		- sourcepath (Optional)
			Filename or directory which is attached.

	classpath()
		Returns a |String| which is joined using
		|javalang-constants-separator|.

	source_path()
		Returns a |String| which is joined using
		|javalang-constants-separator|.

						   *javaclasspath#classpath()*
javaclasspath#classpath()
	Equivalent to below:
>
	javaclasspath#get().classpath()
<

						 *javaclasspath#source_path()*
javaclasspath#source_path()
	Equivalent to below:
>
	javaclasspath#get().source_path()
<

Example ~
>
	let b:javaclasspath_config= {
	\   'variable': {
	\	'paths': [
	\	    {
	\		'kind': 'lib',
	\		'path': '/hoge/fuga/piyo.jar',
	\	    },
	\	    {
	\		'kind': 'src',
	\		'path': './src/main/java/',
	\	    },
	\	    {
	\		'kind': 'lib',
	\		'path': '/hoge/fuga.jar',
	\	    },
	\	    {
	\		'kind': 'src',
	\		'path': './src/test/java/',
	\	    },
	\	],
	\   },
	\}

	let jc= javaclasspath#get()

	" => same to b:javaclasspath_config.variable.paths
	echo jc.parse()
	" => /hoge/fuga/piyo.jar:/hoge/fuga.jar
	echo jc.classpath()

	" => ./src/main/java/:./src/test/java/
	echo jc.source_path()
<

==============================================================================
PARSER MODULE					 *javaclasspath-parser-module*

This section describe |javaclasspath-parser-module| specification.

Abstract ~

Parser Module is used to absorb format differences.

Specification ~

Each parser have some functions below.

javaclasspath#parser#{name}#define()
	Returns |Dictionary| which is parser object. Returning |Dictionary|
	has some functions below.

	{parser}.parse({config})
		Returns |List| has |Dictionary| elements. Each |Dictionary|
		has keys below.

		- kind (Required)
			One of these |String|

			- lib (a classpath)
			- src (a source path)

		- path (Required)
			Filename or directory path

		- javadoc (Optional)
			URL or file/directory path

		- sourcepath (Optional)
			Filename or directory which is attached.

==============================================================================
BUILT-IN PARSERS			       *javaclasspath-builtin-parsers*

standard
	This parser recognize some paths by $JAVA_HOME or |String| related
	java_home key.

	- libs	|List| of |Dictionary| (Required)
		- path	|String| (Required)
		- javadoc |String| (Optional)
		- java_home |String| (Optional)
>
	let g:javaclasspath_config= {
	\   'standard': {
	\	'java_home': 'path/to/java_home',
	\	'libs': [
	\	    {
	\		'path': 'jre/lib/rt.jar',
	\	    },
	\	],
	\   },
	\}
<
variable
	This parser recognize configured |Dictionary| value. Its specification
	is same to parse() returned. See |javaclasspath-parser-module| for
	configuration.

	- paths |List| of |Dictionary| (Required)
>
	let g:javaclasspath_config= {
	\   'variable': {
	\	'paths': [
	\	    {
	\		'kind': 'lib',
	\		'path': 'path/to/jar',
	\	    },
	\	],
	\   },
	\}
<
eclipse
	This parser recognize eclipse's .classpath configuration file.

	- filename |String|     (Required)
	- vars     |Dictionary| (Optional)
>
	let g:javaclasspath_config= {
	\   'eclipse': {
	\	'filename': '.classpath',
	\	'vars': {
	\	    'ECLIPSE_HOME': 'path/to/eclipse/home',
	\	},
	\   },
	\}
<
sbt
	This parser recognize sbt's build definition file.

	- filename |String| (Required)
>
	let g:javaclasspath_config= {
	\   'sbt': {
	\	'filename': 'build.sbt',
	\   },
	\}
<
maven
	This parser recognize pom.xml file.

	- filename |String| (Required)
>
	let g:javaclasspath_config= {
	\   'maven': {
	\	'filename': 'pom.xml',
	\   },
	\}
<

==============================================================================
ACKNOWLEDGEMENT				       *javaclasspath-acknowledgement*

* raa0121

    * sbt parser

==============================================================================
vim:tw=78:ts=8:ft=help:norl:fen:
